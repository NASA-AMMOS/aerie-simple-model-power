package powersystem;


import gov.nasa.jpl.aerie.merlin.framework.Resource;
import gov.nasa.jpl.aerie.merlin.framework.Registrar;
import gov.nasa.jpl.aerie.contrib.serialization.mappers.DoubleValueMapper;

/**
 * This class represents the power generation for the spacecraft using a solar array. The solar array is associated with
 * a battery model, and it supplies power to the spacecraft and the battery. It is part of the overall power system.
 */

public class GenericSolarArray {
    public final double SOLAR_INTENSITY_AT_EARTH = 1360.8; //solar irradiance from the sun at 1 AU (W/m^2)
    public double solarConstant = 0.07;  //to use when solar array is not completely deployed and not producing max power with arrayCellArea

    public SettableState<ArrayDeploymentStates> solarArrayDeploymentState; //State of solar array deployment
    public DerivedState<Double> powerProduction;   //total power produced by the solar arrays (W)
    public SettableState<Double> solarDistance;  //spacecraft distance from the Sun (AU)
    public SettableState<Double> arrayToSunAngle;  //angle between the Sun and the array surface normal vector due to spacecraft orientation (deg)
    public SettableState<Double> arrayCellArea;  //area of the solar arrays containing solar cells (m^2) that can produce power

    public PowerModelSimConfig simConfig;

    public double staticArrayLosses; // Array losses that we do not expect to change with sim time

    //public DistAndAngleCalculator calculator;  //has functions that allows distance and arrayToSunAngle to change on their own

    /**
     * Constructor for the solar array
     * @param powerSimConfig power sim configuration parameters
     * @param solarDistance resource tracking solar distance over time
     * @param powerSimConfig resource tracking array to Sun angle over time
     */
    public GenericSolarArray(PowerModelSimConfig powerSimConfig, Resource<Double> solarDistance, Resource<Double> arrayToSunAngle) {
        this.simConfig = powerSimConfig;
        this.solarArrayDeploymentState = SettableState.builder(ArrayDeploymentStates.class)
                .initialValue( powerSimConfig.deploymentState() ).build();
        this.solarDistance = (SettableState<Double>) solarDistance;
        this.arrayToSunAngle = (SettableState<Double>) arrayToSunAngle;
        this.arrayCellArea = SettableState.builder(Double.class)
                .initialValue( simConfig.arrayMechArea() * simConfig.packingFactor() )
                .build();

        this.powerProduction = DerivedState.builder(Double.class)
                .sourceStates(this.solarDistance, this.arrayToSunAngle, this.solarArrayDeploymentState)
                .valueFunction(this::computeSolarPower)
                .build();

        this.staticArrayLosses = simConfig.cellEfficiency() *
                                 simConfig.conversionEfficiency() *
                                 simConfig.otherLosses();
    }

    /**
     * Computes the solar power generated by the array associated with the battery based on distance, arrayToSunAngle, arrayCellArea of the
     * array, and solar intensity - value changes based on whether the solar array is fully deployed or not
     * Since net power is dependent on this, when solar power value changes so does the net power value
     * @return the solar power
     */
    public double computeSolarPower() {
        if (solarArrayDeploymentState.get() == ArrayDeploymentStates.DEPLOYED) {
            return (SOLAR_INTENSITY_AT_EARTH / (solarDistance.get() * solarDistance.get()) *
                    arrayCellArea.get() *
                    staticArrayLosses *
                    Math.cos(Math.toRadians(arrayToSunAngle.get())) );
        } else {
            return 0.0;
        }
    }

    /**
     * Method to set the deployment state of the solar array
     */
    public void setSolarArrayDeploymentState(ArrayDeploymentStates newState) {
        this.solarArrayDeploymentState.set(newState);
    }

    /**
     * Method for Aerie to register the resources in this model
     * @param registrar how Aerie knows what the resources are
     */
    public void registerStates(Registrar registrar) {
        registrar.discrete("array.powerProduction", powerProduction, new DoubleValueMapper());
        registrar.discrete("spacecraft.solarDistance", solarDistance, new DoubleValueMapper());
        registrar.discrete("spacecraft.arrayToSunAngle", arrayToSunAngle, new DoubleValueMapper());
    }
}
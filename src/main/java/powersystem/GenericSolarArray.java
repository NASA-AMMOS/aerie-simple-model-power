package powersystem;


import gov.nasa.jpl.aerie.merlin.framework.Resource;
import gov.nasa.jpl.aerie.merlin.framework.Registrar;
import gov.nasa.jpl.aerie.contrib.serialization.mappers.DoubleValueMapper;

/**
 * This class represents the power generation for the spacecraft using a solar array. The solar array is associated with
 * a battery model, and it supplies power to the spacecraft and the battery. It is part of the overall power system.
 */

public class GenericSolarArray {
    public double solarIntensity = 1360.8; //the radiation from the sun, in W/m^2
    public double solarConstant = 0.07;  //to use when solar array is not completely deployed and not producing max power with area
    public double irrLosses = 0.984 * 0.94 * 0.99; //represents the irradiance losses (losses because of the material of the array)
    public SettableState<Boolean> solarArrayDeploymentComplete; //whether the solar array is fully deployed
    public SettableState<Boolean> solarArrayDeploymentStarted;  //whether the solar array has started deploying and therefore produces some power
    public DerivedState<Double> solarInputPower;   //represents current/power flowing into battery
    public SettableState<Double> distance;  //distance of spacecraft from the Sun in AU
    public SettableState<Double> angle;  //angle between the suns rays and the normal vector of the surface of the solar array (because of the spacecraft's orientation) in degrees
    public SettableState<Double> area;  //area of the solar array
    //public DistAndAngleCalculator calculator;  //has functions that allows distance and angle to change on their own

    /**
     * Constructor for the solar array
     * @param area the area of the solar array in m^2
     */
    public GenericSolarArray(Resource<Double> area, Resource<Double> distance, Resource<Double> angle) {
        this.solarArrayDeploymentComplete = SettableState.builder(Boolean.class).initialValue(false).build();
        this.solarArrayDeploymentStarted = SettableState.builder(Boolean.class).initialValue(false).build();
        this.distance = (SettableState<Double>) distance;
        this.angle = (SettableState<Double>) angle;
        this.area = (SettableState<Double>) area;

        this.solarInputPower = DerivedState.builder(Double.class)
                .sourceStates(this.distance, this.angle, this.solarArrayDeploymentComplete, this.solarArrayDeploymentStarted)
                .valueFunction(this::computeSolarPower)
                .build();
    }

    /**
     * Computes the solar power generated by the array associated with the battery based on distance, angle, area of the
     * array, and solar intensity - value changes based on whether the solar array is fully deployed or not
     * Since net power is dependent on this, when solar power value changes so does the net power value
     * @return the solar power
     */
    public double computeSolarPower() {
        if (solarArrayDeploymentStarted.get() && !solarArrayDeploymentComplete.get()) {
            return (irrLosses * solarConstant * (solarIntensity / (distance.get() * distance.get())) * Math.cos(Math.toRadians(angle.get())) * area.get());
        } else if (solarArrayDeploymentComplete.get()) {
           return (irrLosses * (solarIntensity / (distance.get() * distance.get())) * Math.cos(Math.toRadians(angle.get())) * area.get());
        } else {
            return 0.0;
        }
    }

    /**
     * Method to represent when the solar arrays have fully deployed and are producing as much power as they can,
     * recomputes the solar power based on the changed attributes of the array
     */
    public void endSolarArrayDeployment() {
        this.solarArrayDeploymentComplete.set(true);
        this.solarArrayDeploymentStarted.set(false);
    }

    /**
     * Method to represent that the solar arrays have started to deploy, it is not producing the max amount of power it
     * can, recomputes the solar power based on the changed attributes of the array
     */
    public void startSolarArrayDeployment() {
        this.solarArrayDeploymentComplete.set(false);
        this.solarArrayDeploymentStarted.set(true);
    }

    /**
     * Method for Aerie to register the resources in this model
     * @param registrar how Aerie knows what the resources are
     */
    public void registerStates(Registrar registrar) {
        registrar.discrete("array.solarPower", solarInputPower, new DoubleValueMapper());
        registrar.discrete("spacecraft.distance", distance, new DoubleValueMapper());
        registrar.discrete("spacecraft.angle", angle, new DoubleValueMapper());
    }
}
package demosystem.models.pel;
    
import gov.nasa.jpl.aerie.contrib.streamline.modeling.Registrar;
import gov.nasa.jpl.aerie.contrib.serialization.mappers.EnumValueMapper;
import gov.nasa.jpl.aerie.contrib.serialization.mappers.DoubleValueMapper;

import gov.nasa.jpl.aerie.contrib.streamline.core.Resource;
import gov.nasa.jpl.aerie.contrib.streamline.core.MutableResource;
import gov.nasa.jpl.aerie.contrib.streamline.modeling.discrete.Discrete;

import static gov.nasa.jpl.aerie.contrib.streamline.modeling.discrete.DiscreteResources.add;
import static gov.nasa.jpl.aerie.contrib.streamline.modeling.discrete.monads.DiscreteResourceMonad.map;
    
/**
* This class is generated by the pel_java_generator.py script. It represents the PEL, which should contains all the
* possible spacecraft components that produce a power load on the spacecraft. For components whose loads are 
* represented by different states, the component state will also be registered as a resource.
*/
public class PELModel {
    
    public Resource<Discrete<Double>> cbeTotalLoad;
    public Resource<Discrete<Double>> mevTotalLoad;
	public MutableResource<Discrete<GNC_State>> gncState;
	public Resource<Discrete<Double>> gncLoad_CBE;
	public Resource<Discrete<Double>> gncLoad_MEV;
	public MutableResource<Discrete<Telecom_State>> telecomState;
	public Resource<Discrete<Double>> telecomLoad_CBE;
	public Resource<Discrete<Double>> telecomLoad_MEV;
	public MutableResource<Discrete<Avionics_State>> avionicsState;
	public Resource<Discrete<Double>> avionicsLoad_CBE;
	public Resource<Discrete<Double>> avionicsLoad_MEV;
	public MutableResource<Discrete<Camera_State>> cameraState;
	public Resource<Discrete<Double>> cameraLoad_CBE;
	public Resource<Discrete<Double>> cameraLoad_MEV;
	public MutableResource<Discrete<Double>> locomotionPower_CBE;
	public Resource<Discrete<Double>> locomotionPower_MEV;
    public PELModel() {
		this.gncState = MutableResource.resource( Discrete.discrete(GNC_State.NOMINAL));
		this.gncLoad_CBE = map( gncState, GNC_State::getCBELoad);
		this.gncLoad_MEV = map( gncState, GNC_State::getMEVLoad);
		this.telecomState = MutableResource.resource( Discrete.discrete(Telecom_State.OFF));
		this.telecomLoad_CBE = map( telecomState, Telecom_State::getCBELoad);
		this.telecomLoad_MEV = map( telecomState, Telecom_State::getMEVLoad);
		this.avionicsState = MutableResource.resource( Discrete.discrete(Avionics_State.ON));
		this.avionicsLoad_CBE = map( avionicsState, Avionics_State::getCBELoad);
		this.avionicsLoad_MEV = map( avionicsState, Avionics_State::getMEVLoad);
		this.cameraState = MutableResource.resource( Discrete.discrete(Camera_State.OFF));
		this.cameraLoad_CBE = map( cameraState, Camera_State::getCBELoad);
		this.cameraLoad_MEV = map( cameraState, Camera_State::getMEVLoad);
		this.locomotionPower_CBE = MutableResource.resource( Discrete.discrete(0.0));
		this.locomotionPower_MEV = map( locomotionPower_CBE, s -> s*1.25);
        this.cbeTotalLoad = add(gncLoad_CBE,telecomLoad_CBE,avionicsLoad_CBE,cameraLoad_CBE,locomotionPower_CBE);
        this.mevTotalLoad = add(gncLoad_MEV,telecomLoad_MEV,avionicsLoad_MEV,cameraLoad_MEV,locomotionPower_MEV);

	}
    public void registerStates(Registrar registrar) {
		registrar.discrete("gncState",gncState, new EnumValueMapper<>(GNC_State.class));
		registrar.discrete("telecomState",telecomState, new EnumValueMapper<>(Telecom_State.class));
		registrar.discrete("avionicsState",avionicsState, new EnumValueMapper<>(Avionics_State.class));
		registrar.discrete("cameraState",cameraState, new EnumValueMapper<>(Camera_State.class));
		registrar.discrete("locomotionPower_CBE",locomotionPower_CBE, new DoubleValueMapper());
		registrar.discrete("locomotionPower_MEV",locomotionPower_MEV, new DoubleValueMapper());
		registrar.discrete("spacecraft.cbeLoad", cbeTotalLoad, new DoubleValueMapper());
		registrar.discrete("spacecraft.mevLoad", mevTotalLoad, new DoubleValueMapper());
	}
}
package demosystem.models.pel;

import gov.nasa.jpl.aerie.merlin.framework.Registrar;
import gov.nasa.jpl.aerie.contrib.serialization.mappers.EnumValueMapper;
import powersystem.SettableState;
import powersystem.DerivedState;

/**
 * This class is generated by the pel_java_generator.py script, and it represents the PEL and contains all the
 * possible power loads of the spacecraft and registers them as resources.
 */
public class PELModel {

    public DerivedState<Double> totalLoad;
	public SettableState<GNC_State> gncState;
	public SettableState<Telecomm_State> telecommState;
	public SettableState<Avionics_State> avionicsState;
	public SettableState<Camera_State> cameraState;
    public PELModel() {
		this.gncState = SettableState.builder(GNC_State.class).initialValue(GNC_State.NOMINAL).build();
		this.telecommState = SettableState.builder(Telecomm_State.class).initialValue(Telecomm_State.OFF).build();
		this.avionicsState = SettableState.builder(Avionics_State.class).initialValue(Avionics_State.ON).build();
		this.cameraState = SettableState.builder(Camera_State.class).initialValue(Camera_State.OFF).build();
        this.totalLoad = DerivedState.builder(Double.class)
                .sourceStates(this.gncState, this.telecommState, this.avionicsState, this.cameraState)
				.valueFunction(this::computeLoad)
				.build();
	}
    /**
     * Computes the power load of the spacecraft so the battery will be discharged accordingly, value changes whenever
     * the states of the instruments change
     * @return the power load of the spacecraft
     */
    public double computeLoad() {
        return this.gncState.get().getLoad() + this.telecommState.get().getLoad() + this.avionicsState.get().getLoad() + this.cameraState.get().getLoad();
	}
    public void registerStates(Registrar registrar) {
		registrar.discrete("gncState",gncState, new EnumValueMapper<>(GNC_State.class));
		registrar.discrete("telecommState",telecommState, new EnumValueMapper<>(Telecomm_State.class));
		registrar.discrete("avionicsState",avionicsState, new EnumValueMapper<>(Avionics_State.class));
		registrar.discrete("cameraState",cameraState, new EnumValueMapper<>(Camera_State.class));
	}
}